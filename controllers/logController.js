const fs = require('fs');
const mongoose = require('mongoose');
const LogRouter = require('../routes/logRoutes');
const Log = require('../models/logModel');
const { Types } = require('mongoose');
const filePath =
  '/Users/mac/Desktop/BE/dumsor-tracker-api/dev-data/logs-simple.json';
const logs = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
const catchAsync = require('./../utils/catchAsync');

exports.checkID = (req, res, next) => {
  if (req.params.id * 1 > logs.length) {
    return res.status(404).json({
      status: 'fail',
      message: 'Invalid ID',
    });
  }
  next();
};

exports.getAllLogs = catchAsync(async (req, res, next) => {
  try {
    const logs = await Log.find();
    res.status(200).json({
      status: 'Success',
      data: {
        results: logs.length,
        logs,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: err.message,
    });
  }
});

exports.getLog = catchAsync(async (req, res, next) => {
  try {
    const log = await Log.findById(req.params.id);
    if (!log) {
      return res.status(404).json({
        status: 'fail',
        message: 'Log not found',
      });
    }
    res.status(200).json({
      status: 'success',
      data: {
        log,
      },
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: error.message,
    });
  }
});

exports.createLog = catchAsync(async (req, res, next) => {
  try {
    const newLog = await Log.create({
        // id will be automatically generated by MongoDB
        location: req.body.location,
        outages: req.body.outages.map(outage => ({
          date: outage.date,
          timeOff: outage.timeOff,
          timeBackOn: outage.timeBackOn
        }))
      });      
    newLog
    .save()
    .then(result => {
      res.status(201).json({
        status: 'Success',
        data: {
          log: result,
        }
      })
    })
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err.message,
    });
  }
});

exports.updateLog = catchAsync(async (req, res, next) => {
  try {
    const log = await Log.findByIdAndUpdate(req.params.id, req.body);
    if (!log) {
      return res.status(404).json({
        status: 'fail',
        message: 'Blog not found',
      });
    }
    res.status(200).json({
      status: 'success',
      data: {
        log,
      },
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err.message,
    });
  }
});

exports.deleteLog = catchAsync(async (req, res, next) => {
  try {
    const log = await Log.findByIdAndDelete(req.params.id);
    if (!log) {
      return res.status(404).json({
        status: 'fail',
        message: 'Log not found',
      });
    }
    res.status(200).json({
      status: 'success',
      data: null,
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err.message,
    });
  }
});
